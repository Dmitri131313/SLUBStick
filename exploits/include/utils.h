#pragma once

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

#define check_id() do { \
		uid_t __uid = getuid(); \
		if (__uid == 0) {printf("[+] you are root root\n");} \
		else printf("[*] you are user %d\n", __uid); \
	} while (0)

size_t PRINT_ERROR = 1;
size_t PRINT_SUCCESS = 1;
size_t PRINT_WARNING = 1;
size_t PRINT_INFO = 1;
size_t PRINT_DEBUG = 0;

#define pr_error(FMT, ...) do { \
        if (PRINT_ERROR) printf("[!] " FMT, ##__VA_ARGS__); \
        exit(-1); \
    } while (0)

#define pr_perror(FMT) do { \
        if (PRINT_ERROR) perror(FMT); \
        exit(-1); \
    } while (0)

#define pr_success(FMT, ...) do { \
        if (PRINT_SUCCESS) printf("[+] " FMT, ##__VA_ARGS__); \
    } while (0)

#define pr_warning(FMT, ...) do { \
        if (PRINT_WARNING) printf("[!] " FMT, ##__VA_ARGS__); \
    } while (0)

#define pr_info(FMT, ...) do { \
        if (PRINT_INFO) printf("[*] " FMT, ##__VA_ARGS__); \
    } while (0)

#define pr_debug(FMT, ...) do { \
        if (PRINT_DEBUG) printf("[*] " FMT, ##__VA_ARGS__); \
    } while (0)

#define pr(FMT, ...) do { \
        printf("[*] " FMT, ##__VA_ARGS__); \
    } while (0)

void wait_input(void)
{
	pr("wait for enter to continue?");
	getchar();
}

#define MAX_TIME 4096
#define RATIO 2
#define MAX_TIME_VAL 128
void print_ptrs_times(size_t *ptrs, size_t *times, size_t size)
{
    size_t max = 0;
    size_t min = -1;
    size_t adjusted_time;

    for (size_t i = 0; i < size; ++i) {
        if (times[i] > max && times[i] < 4000 + max)
            max = times[i];
        if (times[i] < min)
            min = times[i];
    }

    for (size_t i = 0; i < size; ++i) {
        adjusted_time = (times[i] - min) * MAX_TIME_VAL / max;
        printf("% 5ld:% 7ld:%016zx:", i, times[i], ptrs[i]);
        for (size_t j = 0; j < adjusted_time; ++j)
            printf("#");
        printf("\n");
    }
}
void print_times(size_t *times, size_t size)
{
    size_t max = 0;
    size_t min = -1;
    size_t adjusted_time;

    for (size_t i = 0; i < size; ++i) {
        if (times[i] > max && times[i] < 4000 + max)
            max = times[i];
        if (times[i] < min)
            min = times[i];
    }

    for (size_t i = 0; i < size; ++i) {
        adjusted_time = (times[i] - min) * MAX_TIME_VAL / max;
        printf("% 5ld:% 7ld:", i, times[i]);
        for (size_t j = 0; j < adjusted_time; ++j)
            printf("#");
        printf("\n");
    }
}
void print_hist(size_t *times, size_t size)
{
    size_t start_time = 0;
    size_t end_time = MAX_TIME;
    size_t hist[MAX_TIME];
    memset(hist, 0, sizeof(hist));

    for (size_t i = 0; i < size; ++i)
        if (times[i]/RATIO < MAX_TIME)
            ++hist[times[i]/RATIO];

    for (size_t i = 0; i < MAX_TIME; ++i) {
        if (hist[i] > 3) {
            start_time = i;
            break;
        }
    }

    for (ssize_t i = MAX_TIME; i >= 0; --i) {
        if (hist[i] > 3) {
            end_time = i;
            break;
        }
    }

    for (size_t i = start_time; i < end_time; ++i) {
        printf("% 5ld:", i*RATIO);
        for (size_t j = 0; j < hist[i]; ++j)
            printf("#");
        printf("\n");
    }
}
__attribute__((unused))static void hex_dump(size_t* addresses, size_t length)
{
  for (size_t i = 0; i < length; ++i) {
    pr("0x%016lx\n", addresses[i]);
  }
}