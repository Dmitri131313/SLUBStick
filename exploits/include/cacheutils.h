#ifndef CACHEUTILS_H
#define CACHEUTILS_H

#include <time.h>
// #define ARM64

#ifndef HIDEMINMAX
#define MAX(X,Y) (((X) > (Y)) ? (X) : (Y))
#define MIN(X,Y) (((X) < (Y)) ? (X) : (Y))
#endif

static size_t rdtsc(void);
static inline size_t rdtsc_nofence(void)
{
#if defined(ARM64)
  return rdtsc();
#else
  size_t a, d;
  asm volatile ("rdtsc" : "=a" (a), "=d" (d));
  a = (d<<32) | a;
  return a;
#endif
}

static inline size_t rdtsc(void)
{
#if defined(ARM64)
  struct timespec tp;
  clock_gettime(CLOCK_MONOTONIC, &tp);
  return ((size_t) tp.tv_sec) * 1000000000ULL + tp.tv_nsec;
  // size_t val;
  // asm volatile("isb; mrs %0, cntvct_el0" : "=r"(val));
  // return val;
#else
  size_t a, d;
  asm volatile ("mfence");
  asm volatile ("rdtsc" : "=a" (a), "=d" (d));
  a = (d<<32) | a;
  asm volatile ("mfence");
  return a;
#endif
}

static inline size_t rdtsc_begin(void)
{
#if defined(ARM64)
  return rdtsc();
#else
  size_t a, d;
  asm volatile ("mfence");
  asm volatile ("rdtsc" : "=a" (a), "=d" (d));
  a = (d<<32) | a;
  asm volatile ("lfence");
  return a;
#endif
}

static inline size_t rdtsc_end(void)
{
#if defined(ARM64)
  return rdtsc();
#else
  size_t a, d;
  asm volatile ("lfence");
  asm volatile ("rdtsc" : "=a" (a), "=d" (d));
  a = (d<<32) | a;
  asm volatile ("mfence");
  return a;
#endif
}

static inline void flush(__attribute__((unused))size_t p)
{
#ifndef ARM64
  asm volatile (".intel_syntax noprefix");
  asm volatile ("clflush qword ptr [%0]\n" : : "r" (p));
  asm volatile (".att_syntax");
#endif
}

static inline void prefetch(__attribute__((unused))size_t p)
{
#ifndef ARM64
  asm volatile (".intel_syntax noprefix");
  asm volatile ("prefetchnta qword ptr [%0]" : : "r" (p));
  asm volatile ("prefetcht2 qword ptr [%0]" : : "r" (p));
  asm volatile (".att_syntax");
#endif
}

static inline void longnop(void)
{
#ifndef ARM64
  asm volatile ("nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"
                "nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"
                "nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"
                "nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"
                "nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"
                "nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"
                "nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n"
                "nop\nnop\nnop\nnop\nnop\nnop\nnop\nnop\n");
#endif
}
#endif
