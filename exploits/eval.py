#!/usr/bin/env python3

import os
import re

files = os.listdir("eval")
eval_files = [f for f in files if "results_" in f]
eval_noise_files = [f for f in files if "results-noise_" in f]
eval_no_cpu_pinning_files = [f for f in files if "results-no-cpu-pinning_" in f]

def do_print(files, name):
    print(name)
    print("---------------------------------------------------------------------------------")
    print("| obj-size\t | success\t | fail\t\t | retry\t | success rate\t|")
    print("---------------------------------------------------------------------------------")
    lines = []
    for fname in files:
        obj_size = int(re.findall(r"_[0-9]*_", fname)[0][1:-1])
        with open("./eval/"+fname, "r") as f:
            results = f.read()
            success = results.count("SUCCESS")
            fail = results.count("FAIL")
            retry = results.count("RETRY")
            success_rate = 100*success/(fail+success)
            if fail == 0:
                success_rate = "{:.00f}".format(success_rate)
            else:
                success_rate = "{:.01f}".format(success_rate)
            line = "| {}\t\t | {}\t\t | {}\t\t | {}\t\t | {}\t\t|".format(obj_size, success, fail, retry, success_rate)
            lines.append([obj_size, line])
    lines.sort(key=lambda x:x[0])
    for line in lines:
        print(line[1])
    print("---------------------------------------------------------------------------------\n")

do_print(eval_files, "evaluation with cpu pinning")
do_print(eval_no_cpu_pinning_files, "evaluation without cpu pinning")
do_print(eval_noise_files, "evaluation with noise")